const axios = require('axios'); // Importer la biblioth√®que axios pour effectuer des requ√™tes HTTP

module.exports = {
  config: {
    name: "mathquiz", // Nom de la commande
    author: "Bruno", // Auteur de la commande
    version: "1.0.0", // Version de la commande
    countDown: 5, // Temps avant expiration (non utilis√© dans cet exemple)
    role: 0, // R√¥le requis pour utiliser la commande (0 signifie aucun r√¥le sp√©cifique)
    category: "Ai", // Cat√©gorie de la commande
    shortDescription: {
      en: "{p}mathquiz" // Description courte de la commande
    }
  },

  // Fonction d√©clench√©e lorsque la commande est appel√©e
  onStart: async function ({ api, event }) {
    try {
      // Appel √† l'API OpenTDB pour r√©cup√©rer une question de math√©matiques
      const apiUrl = `https://opentdb.com/api.php?amount=1&category=19&type=multiple`;
      const response = await axios.get(apiUrl); // Faire une requ√™te GET √† l'API et attendre la r√©ponse

      // V√©rifier si une question a √©t√© obtenue
      if (response.data && response.data.results && response.data.results.length > 0) {
        const questionData = response.data.results[0]; // Extraire les donn√©es de la premi√®re question
        const question = questionData.question; // R√©cup√©rer le texte de la question
        const correctAnswer = questionData.correct_answer; // R√©cup√©rer la r√©ponse correcte
        const allAnswers = [...questionData.incorrect_answers, correctAnswer].sort(() => Math.random() - 0.5); // M√©langer les r√©ponses incorrectes avec la correcte

        // Traduire la question en fran√ßais
        const translationUrl = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(question)}&langpair=en|fr`;
        const translationResponse = await axios.get(translationUrl); // Faire une requ√™te GET √† l'API de traduction
        const translatedQuestion = translationResponse.data.responseData.translatedText; // R√©cup√©rer le texte traduit

        // Pr√©parer le message avec la question traduite et les choix en anglais
        let message = `üçüüêîBruno va te jouerüêîüêì\n${translatedQuestion}\n`; // Ajouter un titre et la question traduite
        allAnswers.forEach((answer, index) => {
          message += `${index + 1}) ${answer}\n`; // Ajouter chaque choix de r√©ponse avec un num√©ro
        });

        // Envoyer la question traduite √† l'utilisateur
        api.sendMessage(message, event.threadID, (err, info) => {
          if (!err) {
            // Enregistrer le message pour la gestion des r√©ponses
            global.GoatBot.onReply.set(info.messageID, {
              commandName: "mathquiz", // Enregistrer le nom de la commande
              messageID: info.messageID, // Enregistrer l'ID du message
              author: event.senderID, // Enregistrer l'ID de l'utilisateur
              correctAnswer, // Enregistrer la r√©ponse correcte pour v√©rification ult√©rieure
              allAnswers, // Enregistrer toutes les r√©ponses pour comparaison
            });
          }
        });
      } else {
        // Si aucune question n'est trouv√©e, envoyer un message d'erreur
        api.sendMessage("Impossible d'obtenir une question de math√©matiques pour le moment.", event.threadID);
      }
    } catch (error) {
      // G√©rer les erreurs lors de la requ√™te √† l'API
      console.error('Erreur lors de la requ√™te √† l\'API:', error.message);
      api.sendMessage("Une erreur s'est produite lors du traitement de votre demande.", event.threadID);
    }
  },

  // Fonction d√©clench√©e lorsque l'utilisateur r√©pond au bot
  onReply: async function({ api, event, Reply }) {
    const { author, correctAnswer, allAnswers } = Reply; // Extraire les informations de la r√©ponse sauvegard√©e

    if (author !== event.senderID) return;  // V√©rifier que la r√©ponse vient bien de l'utilisateur initial

    const userAnswerIndex = parseInt(event.body.trim()); // Convertir la r√©ponse de l'utilisateur en un nombre

    // V√©rifier que l'utilisateur a donn√© un chiffre valide correspondant √† un choix
    if (isNaN(userAnswerIndex) || userAnswerIndex < 1 || userAnswerIndex > allAnswers.length) {
      return api.sendMessage("Veuillez r√©pondre avec un chiffre correspondant √† l'un des choix.", event.threadID);
    }

    const userAnswer = allAnswers[userAnswerIndex - 1]; // R√©cup√©rer la r√©ponse correspondant au chiffre donn√©

    // Comparer la r√©ponse de l'utilisateur avec la r√©ponse correcte
    if (userAnswer === correctAnswer) {
      api.sendMessage("Bonne r√©ponse ! üéâ", event.threadID); // Envoyer un message de f√©licitations si la r√©ponse est correcte
    } else {
      api.sendMessage(`Mauvaise r√©ponse ! La bonne r√©ponse √©tait : ${correctAnswer}`, event.threadID); // Informer l'utilisateur de la bonne r√©ponse si la sienne est incorrecte
    }
  }
};
