const axios = require('axios'); // Importer la biblioth√®que axios pour faire des requ√™tes HTTP
const stringSimilarity = require('string-similarity'); // Importer la biblioth√®que pour comparer les similarit√©s entre cha√Ænes

module.exports = {
  config: {
    name: "po√®me", // Nom de la commande
    author: "Bruno", // Auteur du script
    version: "1.0.0", // Version du script
    countDown: 5, // Temps d'attente en secondes avant d'ex√©cuter la commande
    role: 0, // R√¥le requis pour ex√©cuter la commande (0 signifie que tout le monde peut l'ex√©cuter)
    category: "Ai", // Cat√©gorie du script
    shortDescription: {
      en: "{p}lu" // Description courte en anglais
    }
  },
  onStart: async function ({ api, event, args }) {
    try {
      // V√©rifie si un titre de po√®me a √©t√© fourni par l'utilisateur
      if (!args[0]) {
        return api.sendMessage("Veuillez fournir le titre d'un po√®me.", event.threadID);
      }

      const poemTitle = args.join(" "); // Combine les arguments en une seule cha√Æne pour former le titre du po√®me
      const encodedPoemTitle = encodeURIComponent(poemTitle); // Encode le titre du po√®me pour l'utiliser dans l'URL
      const apiUrl = `https://poetrydb.org/title/${encodedPoemTitle}`; // Construire l'URL de l'API pour rechercher le po√®me par titre

      // Faire une requ√™te GET √† l'API PoetryDB pour obtenir les d√©tails du po√®me
      const response = await axios.get(apiUrl);

      // V√©rifie si la r√©ponse contient des donn√©es et si des po√®mes ont √©t√© trouv√©s
      if (response.data && response.data.length > 0) {
        const poem = response.data[0]; // Prendre le premier po√®me trouv√© (au cas o√π il y aurait plusieurs r√©sultats)

        // Traduire chaque ligne du po√®me en fran√ßais
        const translatedLines = await Promise.all(poem.lines.map(async (line) => {
          return await translateText(line); // Appeler la fonction pour traduire chaque ligne
        }));

        // Pr√©parer le po√®me avec des emojis d√©coratifs
        const decoratedPoem = {
          "üìù Titre": poem.title, // Titre du po√®me avec un emoji
          "üë§ Auteur": poem.author, // Auteur du po√®me avec un emoji
          "üìú Po√®me": translatedLines.map(line => `üåü ${line}`).join("\n"), // Chaque ligne du po√®me traduite avec un emoji d√©coratif
          "üî¢ Nombre de vers": poem.linecount // Nombre de lignes du po√®me avec un emoji
        };

        // Cr√©er un message format√© avec les d√©tails du po√®me
        const formattedResponse = `
          üìù *Titre*: ${decoratedPoem["üìù Titre"]}
          üë§ *Auteur*: ${decoratedPoem["üë§ Auteur"]}
          üìú *Po√®me*:\n${decoratedPoem["üìú Po√®me"]}
          üî¢ *Nombre de vers*: ${decoratedPoem["üî¢ Nombre de vers"]}
        `;

        // Envoyer le po√®me d√©cor√© et traduit √† l'utilisateur
        api.sendMessage(formattedResponse, event.threadID);
      } else {
        // Si aucun po√®me n'est trouv√©, rechercher des titres similaires
        const allTitlesResponse = await axios.get('https://poetrydb.org/title'); // Obtenir tous les titres disponibles
        const allTitles = allTitlesResponse.data.map(poem => poem.title); // Extraire les titres des po√®mes

        // Trouver les titres similaires en utilisant la similarit√© de cha√Ænes
        const similarTitles = stringSimilarity.findBestMatch(poemTitle, allTitles).ratings
          .filter(result => result.rating > 0.3) // Filtrer les titres similaires avec un seuil de similarit√© (0.3)
          .sort((a, b) => b.rating - a.rating) // Trier les r√©sultats par ordre d√©croissant de similarit√©
          .slice(0, 5) // Limiter le nombre de suggestions √† 5
          .map(result => result.target); // Extraire les titres similaires

        // V√©rifier s'il y a des titres similaires trouv√©s
        if (similarTitles.length > 0) {
          const suggestions = similarTitles.join("\n"); // Joindre les titres similaires en une seule cha√Æne
          api.sendMessage(`Je n'ai pas trouv√© de po√®me avec ce titre exact. Peut-√™tre vouliez-vous dire :\n\n${suggestions}`, event.threadID);
          // Envoyer les suggestions de titres similaires √† l'utilisateur
        } else {
          api.sendMessage("Aucun po√®me similaire trouv√©. Essayez un autre titre.", event.threadID);
          // Informer l'utilisateur qu'aucun titre similaire n'a √©t√© trouv√©
        }
      }
    } catch (error) {
      // Gestion des erreurs en cas de probl√®me avec l'API ou le code
      console.error('Erreur lors de la requ√™te √† l\'API PoetryDB:', error.message);
      api.sendMessage("Une erreur est survenue lors du traitement de votre demande.", event.threadID);
    }
  }
};

// Fonction pour d√©couper le texte en segments de 500 caract√®res maximum
function chunkText(text, size) {
  const chunks = []; // Tableau pour stocker les segments de texte
  for (let i = 0; i < text.length; i += size) {
    chunks.push(text.slice(i, i + size)); // D√©couper le texte en morceaux de taille sp√©cifi√©e
  }
  return chunks; // Retourner les segments de texte
}

// Fonction pour traduire un segment de texte
async function translateTextSegment(segment) {
  const translateUrl = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(segment)}&langpair=en|fr`;
  // Construire l'URL de l'API MyMemory pour la traduction
  const translationResponse = await axios.get(translateUrl); // Faire une requ√™te GET pour traduire le texte
  return translationResponse.data.responseData.translatedText; // Retourner le texte traduit
}

// Fonction pour traduire tout le texte en d√©coupant si n√©cessaire
async function translateText(text) {
  const chunks = chunkText(text, 500); // D√©couper le texte en morceaux de 500 caract√®res maximum
  const translatedChunks = await Promise.all(chunks.map(chunk => translateTextSegment(chunk)));
  // Traduire chaque morceau de texte simultan√©ment
  return translatedChunks.join(" "); // Joindre les morceaux traduits en une seule cha√Æne
}
